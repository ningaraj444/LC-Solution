

class Solution {
public:
    int robber(int indx, vector<int>&nums,vector<int>&dp){
        if(indx==0) return dp[indx]=nums[0];
        if(indx<0) return 0;
        if(dp[indx]!=-1) return dp[indx];
        int pick=nums[indx]+robber(indx-2,nums,dp);
        int not_pick=0+robber(indx-1,nums,dp);
        return dp[indx]=max(pick,not_pick);
    }
    int rob(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n,-1);
        int loot=robber(n-1,nums,dp);
        return loot;
    }
};



class Solution {
public:
  
    int rob(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n,-1);
        dp[0]=nums[0];
        for(int i=1;i<n;i++){
         int take=nums[i];
         if(i>1) take+=dp[i-2];
         int not_take=0+dp[i-1];
         dp[i]=max(take,not_take);
        }
        return dp[n-1];
    }



    class Solution {
public:
  
    int rob(vector<int>& nums) {
        int n=nums.size();
        int prev=nums[0],prev2=0;
        for(int i=1;i<n;i++){
         int take=nums[i]+prev2;
         int not_take=0+prev;
         int curr_i=max(take,not_take);
         prev2=prev;
         prev=curr_i;
        }
        return prev;
    }
};
};

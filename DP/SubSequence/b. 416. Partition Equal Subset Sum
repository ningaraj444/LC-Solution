

class Solution {
public:
    bool helper(int indx,int target,vector<int>&nums){
        vector<bool>prev(target+1,0),curr(target+1,0);
        prev[0]=true,curr[0]=true;
        if(target>=nums[0]) prev[nums[0]]=true;
        for(int i=1;i<=indx;i++){
            for(int num=1;num <=target;num++){
                bool not_take=prev[num];
                bool take=false;
                if(num>=nums[i]) take=prev[num-nums[i]];
                curr[num]=not_take||take;
            }
            prev=curr;
        }
        return prev[target];
    }

    bool canPartition(vector<int>& nums) {
        int n=nums.size();
        int sum=0;
        for(int i=0;i<n;i++){
            sum+=nums[i];
        }
        if(sum%2!=0) return false;
         return helper(n-1,sum/2,nums);
    }
};

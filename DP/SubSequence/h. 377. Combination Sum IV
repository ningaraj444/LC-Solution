
class Solution {
public:

    int helper(vector<int>&nums,int target,vector<int>&dp){
        if(target==0) return 1;
        if(target<0) return 0;
         
        if(dp[target]!=-1) return dp[target];

         int total_ways=0;
         for(int num:nums){
            total_ways+=helper(nums,target-num,dp);
         }
         return dp[target]=total_ways;
    }

    int combinationSum4(vector<int>& nums, int target) {
        vector<int>dp(target+1,-1);
        return helper(nums,target,dp);
    }
};



class Solution {
public:
    
    int combinationSum4(vector<int>& nums, int target) {
        vector<unsigned int> dp(target + 1, 0);
        dp[0] = 1;

        for (int i = 1; i <= target; i++) {
            for (int num : nums) {
                if (i - num >= 0) {
                    dp[i] = (dp[i]+dp[i - num]);
                }
            }
        }

        return (int)dp[target]; 
    }
};

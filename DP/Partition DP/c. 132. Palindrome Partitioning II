

class Solution {
public:
    bool ispalindrome(int i, int j, string &s){
         while(i<j){
            if(s[i]!=s[j]) return false;
            i++;
            j--;
         }
         return true;
    }

    int helper(int i, int n, string &s, vector<int> &dp){
        if(i==n) return 0;
        if(dp[i]!=-1) return dp[i];
        int min_cuts=INT_MAX;
    
        for(int j=i;j<n;j++){
            if(ispalindrome(i, j, s)){
                 int cuts=1+helper(j+1,n,s,dp);
                 min_cuts=min(min_cuts,cuts);
            }
        }
        return dp[i]=min_cuts;
    }

    int minCut(string s) {
        int n=s.length();
        vector<int>dp(n,-1);
        return helper(0,n,s,dp)-1;
    }
};



class Solution {
public:
    bool ispalindrome(int i, int j, string &s){
         while(i<j){
            if(s[i]!=s[j]) return false;
            i++;
            j--;
         }
         return true;
    }

    int minCut(string s) {
        int n=s.length();
        vector<int>dp(n+1,0);
        
        for(int i=n-1;i>=0;i--){
            int min_cuts=INT_MAX;
            for(int j=i;j<n;j++){
                if(ispalindrome(i, j, s)){
                    int cuts=1+dp[j+1];
                    min_cuts=min(min_cuts,cuts);
                }
            }
            dp[i]=min_cuts;
        }
        return dp[0]-1;
    }
};




class Solution {
public:
   int helper(int i, int j, vector<int>&cuts,vector<vector<int>>& dp){
       if(i>j) return 0;
       if(dp[i][j]!=-1) return dp[i][j];
       int mini=INT_MAX;
       for(int indx=i;indx<=j;indx++){
        int cost=cuts[j+1]-cuts[i-1] + helper(i,indx-1,cuts,dp) + helper(indx+1,j,cuts,dp);
        mini=min(mini,cost);
       }
    return dp[i][j]=mini;
   }

    int minCost(int n, vector<int>& cuts) {
        cuts.push_back(n);
        cuts.insert(cuts.begin(),0);
        sort(cuts.begin(),cuts.end());
        int c = cuts.size();
        vector<vector<int>>dp(c+1,vector<int>(c+1,-1));
        return helper(1, c - 2, cuts,dp);

    }
};



class Solution {
public:
    int minCost(int n, vector<int>& cuts) {
        cuts.push_back(n);
        cuts.insert(cuts.begin(), 0);
        sort(cuts.begin(), cuts.end());

        int c = cuts.size();
        vector<vector<int>> dp(c, vector<int>(c, 0));

        for (int i = c - 2; i >= 1; i--) {
            for (int j = i; j <= c - 2; j++) {
                int mini = INT_MAX;
                for (int indx = i; indx <= j; indx++) {
                    int cost = cuts[j + 1] - cuts[i - 1] + dp[i][indx - 1] + dp[indx + 1][j];
                    mini = min(mini, cost);
                }
                dp[i][j] = mini;
            }
        }
        return dp[1][c - 2];
    }
};



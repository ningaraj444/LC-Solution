

class Solution {
public:
     int helper(int i, int j, vector<int>& nums,vector<vector<int>>& dp){
       if(i>j) return 0;
       if(dp[i][j]!=-1) return dp[i][j];
       int maxi=INT_MIN;
       for(int indx=i;indx<=j;indx++){
        int cost=nums[j+1]*nums[i-1]*nums[indx] + helper(i,indx-1,nums,dp) + 
        helper(indx+1,j,nums,dp);
        maxi=max(maxi,cost);
       }
    return dp[i][j]=maxi;
   }

    int maxCoins(vector<int>& nums) {
        int n = nums.size();
        nums.push_back(1);
        nums.insert(nums.begin(),1);
        vector<vector<int>>dp(n+2,vector<int>(n+2,-1));
        return helper(1, n, nums,dp);
    }
};



class Solution {
public:

    int maxCoins(vector<int>& nums) {
        int n = nums.size();
        nums.push_back(1);
        nums.insert(nums.begin(),1);
        vector<vector<int>>dp(n+2,vector<int>(n+2,0));
        
        for(int i=n;i>=1;i--){
            for(int j=i;j<=n;j++){
                int maxi=INT_MIN;
                for(int indx=i;indx<=j;indx++){
                     int cost=nums[j+1]*nums[i-1]*nums[indx] + dp[i][indx-1] +
                      dp[indx+1][j];
                     maxi=max(maxi,cost);
                }
                dp[i][j]=maxi;
            }
        }
        return dp[1][n];
    }
};





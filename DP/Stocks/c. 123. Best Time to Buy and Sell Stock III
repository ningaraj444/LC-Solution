



class Solution {
public:
   int helper(int indx, vector<int>&prices, int buy,int cap,vector<vector<vector<int>>> &dp){
        if(cap==0) return 0;
        if(indx==prices.size()) return 0;
        if(dp[indx][buy][cap]!=-1) return dp[indx][buy][cap];

        int profit=0;
        
        if(buy){
            profit=max(-prices[indx]+helper(indx+1,prices,0,cap,dp),helper(indx+1,prices,1,
            cap,dp));
        }
        else{
            profit=max(prices[indx]+helper(indx+1,prices,1,cap-1,dp),helper(indx+1,prices,
            0,cap,dp));
        }
        return dp[indx][buy][cap]=profit;
    }

    int maxProfit(vector<int>& prices) {
        vector<vector<vector<int>>>dp(prices.size(),vector<vector<int>>(2,vector<int>(3,-1)));
        return helper(0,prices,1,2,dp);
    }
};



class Solution {
public:

    int maxProfit(vector<int>& prices) {
         int n=prices.size();
        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));

         for(int indx=n-1;indx>=0;indx--){
            for(int buy=0;buy<=1;buy++){
                for(int cap=1;cap<=2;cap++){
                      if(buy){
                            dp[indx][buy][cap]=max(-prices[indx]+dp[indx+1][0][cap],
                              dp[indx+1][1][cap]);
                       }
                       else{
                        dp[indx][buy][cap]=max(prices[indx]+dp[indx+1][1][cap-1],
                              dp[indx+1][0][cap]);
                       }
                }
            }
         }
         return dp[0][1][2];
    }
};


class Solution {
public:

    int maxProfit(vector<int>& prices) {
         int n=prices.size();
         vector<vector<int>>after(2,vector<int>(3,0));
        vector<vector<int>>curr(2,vector<int>(3,0));

         for(int indx=n-1;indx>=0;indx--){
            for(int buy=0;buy<=1;buy++){
                for(int cap=1;cap<=2;cap++){
                      if(buy){
                            curr[buy][cap]=max(-prices[indx]+after[0][cap],
                              after[1][cap]);
                       }
                       else{
                           curr[buy][cap]=max(prices[indx]+after[1][cap-1],
                             after[0][cap]);
                       }
                }
                after=curr;
            }
         }
         return curr[1][2];
    }
};


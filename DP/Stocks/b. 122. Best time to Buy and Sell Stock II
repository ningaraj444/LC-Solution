

class Solution {
public:
    int helper(int indx, vector<int>&prices, int buy,vector<vector<int>> &dp){
        if(indx==prices.size()) return 0;
        int profit=0;
        if(dp[indx][buy]!=-1) return dp[indx][buy];
        
        if(buy){
            profit=max(-prices[indx]+helper(indx+1,prices,0,dp),helper(indx+1,prices,1,dp));
        }
        else{
            profit=max(prices[indx]+helper(indx+1,prices,1,dp),helper(indx+1,prices,0,dp));
        }
        return dp[indx][buy]=profit;
    }
    int maxProfit(vector<int>& prices) {
        vector<vector<int>>dp(prices.size(),vector<int>(2,-1));
        return helper(0,prices,1,dp);
    }
};



class Solution {
public:
   
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>>dp(n+1,vector<int>(2,0));
        // dp[n][0]=dp[n][1]=0;
        int profit=0;
        
        for (int indx = n - 1; indx >= 0; indx--) {
            for (int buy = 0; buy < 2; buy++) {
                if (buy) {
                    dp[indx][buy] = max(-prices[indx] + dp[indx + 1][0], dp[indx + 1][1]);
                } else {
                    dp[indx][buy] = max(prices[indx] + dp[indx + 1][1], dp[indx + 1][0]);
                }
            }
        }

        return dp[0][1];
    }
};


class Solution {
public:
   
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>>dp(n+1,vector<int>(2,0));
        // dp[n][0]=dp[n][1]=0;
        int profit=0;
        vector<int>tempA(2,0),tempB(2,0);
        for (int indx = n - 1; indx >= 0; indx--) {
            for (int buy = 0; buy < 2; buy++) {
                if (buy) {
                    tempA[buy] = max(-prices[indx] + tempB[0], tempB[1]);
                } else {
                    tempA[buy] = max(prices[indx] + tempB[1], tempB[0]);
                }
            }
            tempB=tempA;
        }

        return tempA[1];
    }
};


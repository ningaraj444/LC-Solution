


class Solution {
public:
   
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>>dp(n+2,vector<int>(2,0));
        // dp[n][0]=dp[n][1]=0;
        int profit=0;
        
        for (int indx = n - 1; indx >= 0; indx--) {
            for (int buy = 0; buy < 2; buy++) {
                if (buy) {
                    dp[indx][buy] = max(-prices[indx] + dp[indx + 1][0], dp[indx + 1][1]);
                } else {
                    dp[indx][buy] = max(prices[indx] + dp[indx + 2][1], dp[indx + 1][0]);
                }
            }
        }

        return dp[0][1];
    }
};



class Solution {
public:
   
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>>dp(n+2,vector<int>(2,0));
        // dp[n][0]=dp[n][1]=0;
        int profit=0;
        vector<int>prev2(2,0),prev(2,0),curr(2,0);



        for (int indx = n - 1; indx >= 0; indx--) {
            for (int buy = 0; buy < 2; buy++) {
                if (buy) {
                    curr[buy] = max(-prices[indx] + prev[0], prev[1]);
                } else {
                   curr[buy] = max(prices[indx] + prev2[1], prev[0]);
                }
            }
            prev2=prev;
            prev=curr;
        }

        return prev[1];
    }
};



class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        int maxi=0,last_indx=0;
        vector<int>dp(n,1),hash(n,0);
        sort(nums.begin(),nums.end());
        for(int indx=1;indx<n;indx++){
            hash[indx]=indx;
            for(int prev=0;prev<indx;prev++){
                if(nums[indx]%nums[prev]==0 && dp[indx]<1+dp[prev]){
                     dp[indx]=max(dp[indx],1+dp[prev]);
                     hash[indx]=prev;
                }
            }
            if(dp[indx]>maxi){
                maxi=dp[indx];
                last_indx=indx;
            }   
        }
        vector<int>temp;
        temp.push_back(nums[last_indx]);
        while(hash[last_indx]!=last_indx){
            last_indx=hash[last_indx];
            temp.push_back(nums[last_indx]);
        }
        reverse(temp.begin(),temp.end());
        return temp;
    }
};


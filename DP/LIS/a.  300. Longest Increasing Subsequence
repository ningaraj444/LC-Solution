

class Solution {
public:
    int helper(int indx,int prev, vector<int>&nums){
        if(indx==nums.size()) return 0;
        int len=0;
        len=helper(indx+1,prev,nums);
        if(prev==-1 || nums[indx]>nums[prev]) len=max(len,1+helper(indx+1,indx,nums));
        return len;
    }

    int lengthOfLIS(vector<int>& nums) {
        return helper(0,-1,nums);
    }
};



class Solution {
public:
    int helper(int indx,int prev, vector<int>&nums,vector<vector<int>> &dp){
        if(indx==nums.size()) return 0;
        if(dp[indx][prev+1]!=-1) return dp[indx][prev+1];
        int len=0;
        len=helper(indx+1,prev,nums,dp);
        if(prev==-1 || nums[indx]>nums[prev]) len=max(len,1+helper(indx+1,indx,nums,dp));
        return dp[indx][prev+1]=len;
    }

    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>>dp(n,vector<int>(n+1,-1));
        return helper(0,-1,nums,dp);
    }
};



class Solution {
public:

    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        int maxi=0;
        vector<int>dp(n,1);
        for(int indx=0;indx<n;indx++){
            for(int prev=0;prev<indx;prev++){
                if(nums[prev]<nums[indx]) dp[indx]=max(dp[indx],1+dp[prev]);
            }
            maxi=max(maxi,dp[indx]);
        }
        return maxi;
    }
};



Storing Longest Increasing Subsequence:

class Solution {
public:

    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        int maxi=0,last_indx=0;
        vector<int>dp(n,1),has(n,0);
        for(int indx=0;indx<n;indx++){
            hash[indx]=indx;
            for(int prev=0;prev<indx;prev++){
                if(nums[prev]<nums[indx] && dp[indx]>1+dp[prev]){
                     dp[indx]=max(dp[indx],1+dp[prev]);
                     hash[indx]=prev;
                }
            }
            if(dp[indx]>maxi){
                maxi=dp[indx];
                last_indx=indx;
            }   
        }
        vector<int>temp;
        temp.push_back(nums[last_indx]);
        while(hash[last_indx]!=last_indx){
            last_indx=hash[last_indx];
            temp.push_back(nums[last_indx]);
        }
        return temp;
    }
};


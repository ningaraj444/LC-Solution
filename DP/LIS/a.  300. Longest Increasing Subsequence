

class Solution {
public:
    int helper(int indx,int prev, vector<int>&nums){
        if(indx==nums.size()) return 0;
        int len=0;
        len=helper(indx+1,prev,nums);
        if(prev==-1 || nums[indx]>nums[prev]) len=max(len,1+helper(indx+1,indx,nums));
        return len;
    }

    int lengthOfLIS(vector<int>& nums) {
        return helper(0,-1,nums);
    }
};



class Solution {
public:
    int helper(int indx,int prev, vector<int>&nums,vector<vector<int>> &dp){
        if(indx==nums.size()) return 0;
        if(dp[indx][prev+1]!=-1) return dp[indx][prev+1];
        int len=0;
        len=helper(indx+1,prev,nums,dp);
        if(prev==-1 || nums[indx]>nums[prev]) len=max(len,1+helper(indx+1,indx,nums,dp));
        return dp[indx][prev+1]=len;
    }

    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>>dp(n,vector<int>(n+1,-1));
        return helper(0,-1,nums,dp);
    }
};



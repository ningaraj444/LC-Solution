

class Solution {
public:

 int longestCommonSubsequence(string text1, string text2,vector<vector<int>>&dp) {
        int n = text1.size();
        int m = text2.size();
        
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (text1[i - 1] == text2[j - 1])
                    dp[i][j] = 1 + dp[i-1][j - 1];
                else
                    dp[i][j] = max(dp[i-1][j], dp[i][j - 1]);
            }
        }

        return dp[n][m];
    }

    string shortestCommonSupersequence(string str1, string str2) {
             vector<vector<int>> dp(str1.length() + 1, vector<int>(str2.length() + 1, 0));

        int len=longestCommonSubsequence(str1,str2,dp);
        string ans="";
        int i=str1.length();
        int j=str2.length();

        while(i>0 && j>0){
            if(str1[i-1]==str2[j-1]){
                ans+=str1[i-1];
                i--;j--;
            }
            else if(dp[i-1][j]>dp[i][j-1]){
                ans+=str1[i-1];
                i--;
            }
            else{
                ans+=str2[j-1];
                j--;
            }
        }
        while(i>0){
             ans+=str1[i-1];
             i--;
        }
        while(j>0){
            ans+=str2[j-1];
            j--;
        }     
         reverse(ans.begin(),ans.end());
         return ans;
    }
};

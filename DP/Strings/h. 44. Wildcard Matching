

class Solution {
public:

   bool helper(int i,string &p,int j, string &s,vector<vector<int>>&dp){
        if(i<0 && j<0) return true;
        if(i<0 && j>=0) return false;
        if(j<0 && i>=0){
            for(int ii=i;ii>=0;ii--){
                if(p[ii]!='*') return false;
            }
            return true;
        }
        if(dp[i][j]!=-1) return dp[i][j];

        if(s[j]==p[i] || p[i]=='?') return dp[i][j]=helper(i-1,p,j-1,s,dp);

        else if(p[i]=='*') return dp[i][j]=helper(i-1,p,j,s,dp) || helper(i,p,j-1,s,dp);
        else return dp[i][j]=false;
   }

    bool isMatch(string s, string p) {
        int m=s.length();
        int n=p.length();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return helper(n-1,p,m-1,s,dp);
    }
};



class Solution {
public:

    bool isMatch(string s, string p) {
        int m=s.length();
        int n=p.length();
        vector<vector<bool>>dp(n+1,vector<bool>(m+1,false));
       
       dp[0][0]=true;
       for(int j=1;j<=m;j++) dp[0][j]=false;
    //    for(int i=1;i<=n;i++){
    //     bool flag=true;
    //       for(int ii=i;ii>=1;ii--){
    //             if(p[ii-1]!='*') {
    //                 flag= false;
    //                 break;
    //             }    
    //         }
    //         dp[i][0]= flag;
    //    }
        for (int i = 1; i <= n; i++) {
            if (p[i - 1] == '*')
                dp[i][0] = dp[i - 1][0];
            else
                dp[i][0] = false;
        }

       for(int i=1;i<=n;i++){
           for(int j=1;j<=m;j++){
                  if(s[j-1]==p[i-1] || p[i-1]=='?')  dp[i][j]=dp[i-1][j-1];

                  else if(p[i-1]=='*')  dp[i][j]=dp[i-1][j] || dp[i][j-1];
           }
       }
         return dp[n][m];
    }
};



class Solution {
public:
    bool isMatch(string s, string p) {
        int m = s.length();
        int n = p.length();

        vector<bool> prev(m + 1, false), curr(m + 1, false);
        prev[0] = true;

        for (int i = 1; i <= n; i++) {
            // Initialize curr[0]
            curr[0] = (p[i - 1] == '*') && prev[0];

            for (int j = 1; j <= m; j++) {
                if (p[i - 1] == s[j - 1] || p[i - 1] == '?') {
                    curr[j] = prev[j - 1];
                } else if (p[i - 1] == '*') {
                    curr[j] = prev[j] || curr[j - 1];
                } else {
                    curr[j] = false;
                }
            }

            prev = curr;
        }

        return prev[m];
    }
};



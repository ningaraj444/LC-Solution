

class Solution {
public:

    int helper(int i,string &s,int j, string &t,vector<vector<int>>&dp){
        if(j<0) return 1;
        if(i<0) return 0;
        
        if(dp[i][j]!=-1) return dp[i][j];

        if(s[i]==t[j]) return dp[i][j]=(helper(i-1,s,j-1,t,dp)+helper(i-1,s,j,t,dp));
        else return dp[i][j]=helper(i-1,s,j,t,dp);        
    }

    int numDistinct(string s, string t) {
        int n=s.length();
        int m=t.length();
        vector<vector<int>>dp(n,vector<int>(m,-1));

        return helper(n-1,s,m-1,t,dp);
    }
};


class Solution {
public:

    int numDistinct(string s, string t) {
        int n=s.length();
        int m=t.length();
        vector<vector<unsigned int>>dp(n+1,vector<unsigned int>(m+1,0));
 
        for(int i=0;i<=n;i++) dp[i][0]=1;
         
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i-1]==t[j-1])  dp[i][j]=dp[i-1][j-1]+dp[i-1][j];
                 else  dp[i][j]=dp[i-1][j]; 
            }
        }
        return dp[n][m];
    }
};


class Solution {
public:

    int numDistinct(string s, string t) {
        int n=s.length();
        int m=t.length();
        // vector<vector<unsigned int>>dp(n+1,vector<unsigned int>(m+1,0));
        vector<unsigned int>prev(m+1,0),curr(m+1,0);
        prev[0]=curr[0]=1;
         
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i-1]==t[j-1])  curr[j]=prev[j-1]+prev[j];
                 else  curr[j]=prev[j]; 
            }
            prev=curr;
        }
        return prev[m];
    }
};


class Solution {
public:

    int numDistinct(string s, string t) {
        int n=s.length();
        int m=t.length();

        vector<unsigned int>prev(m+1,0);
        prev[0]=1;
         
        for(int i=1;i<=n;i++){
            for(int j=m;j>=1;j--){
                if(s[i-1]==t[j-1])  prev[j]=prev[j-1]+prev[j];
                 else  prev[j]=prev[j]; 
            }
        }
        return prev[m];
    }
};


You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container holds the maximum amount of water.

Return the maximum amount of water a container can store.

Notice: You may not slant the container.

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
 

Constraints:

n == height.length
2 <= n <= 105
0 <= height[i] <= 104

  

//o(n2);
class Solution {
public:
    int maxArea(vector<int>& height) {
        int n=height.size();
        int max_area=0;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                int ht=min(height[i],height[j]);
                int area=ht*(j-i);
                max_area=max(area,max_area);
            }
        }
        return max_area;
    }
};

//o(n) tc
class Solution {
public:
    int maxArea(vector<int>& height) {
        int n=height.size();
        int max_area=0;
       int left=0,right=n-1;
       while(left<right){
         int ht=min(height[right],height[left]);
         int area=ht*(right-left);
         max_area=max(max_area,area);
         if(height[left]<height[right]) left++;
         else right--;
       }
        return max_area;
    }
};


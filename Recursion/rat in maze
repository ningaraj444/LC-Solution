

void solve(int i, int j, vector<vector<int>> &a, int n, vector<string> &ans, string move, vector<vector<int>> &vis) {
    if (i == n - 1 && j == n - 1) {
        ans.push_back(move);
        return;
    }

    // downward
    if (i + 1 < n && !vis[i + 1][j] && a[i + 1][j] == 1) {
        vis[i][j] = 1;
        solve(i + 1, j, a, n, ans, move + 'D', vis);
        vis[i][j] = 0;
    }

    // left
    if (j - 1 >= 0 && !vis[i][j - 1] && a[i][j - 1] == 1) {
        vis[i][j] = 1;
        solve(i, j - 1, a, n, ans, move + 'L', vis);
        vis[i][j] = 0;
    }

    // right
    if (j + 1 < n && !vis[i][j + 1] && a[i][j + 1] == 1) {
        vis[i][j] = 1;
        solve(i, j + 1, a, n, ans, move + 'R', vis);
        vis[i][j] = 0;
    }

    // upward
    if (i - 1 >= 0 && !vis[i - 1][j] && a[i - 1][j] == 1) {
        vis[i][j] = 1;
        solve(i - 1, j, a, n, ans, move + 'U', vis);
        vis[i][j] = 0;
    }
}

vector<string> findPath(vector<vector<int>> &m, int n) {
    vector<string> ans;
    vector<vector<int>> vis(n, vector<int>(n, 0));
    if (m[0][0] == 1) {
        solve(0, 0, m, n, ans, "", vis);
    }
    return ans;
}




class Solution {
public:
    void solve(int i, int j, vector<vector<int>> &m, int n, vector<string> &ans, string &path, vector<vector<int>> &vis,
               vector<int> &di, vector<int> &dj, string &dir) {
        if (i == n - 1 && j == n - 1) {
            ans.push_back(path);
            return;
        }

        for (int idx = 0; idx < 4; idx++) {
            int ni = i + di[idx];
            int nj = j + dj[idx];
            if (ni >= 0 && nj >= 0 && ni < n && nj < n && !vis[ni][nj] && m[ni][nj] == 1) {
                vis[i][j] = 1;
                path.push_back(dir[idx]);
                solve(ni, nj, m, n, ans, path, vis, di, dj, dir);
                path.pop_back();         // backtrack
                vis[i][j] = 0;
            }
        }
    }

    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string> ans;
        if (m[0][0] == 0 || m[n - 1][n - 1] == 0)
            return ans;

        vector<vector<int>> vis(n, vector<int>(n, 0));
        vector<int> di = {+1, 0, 0, -1};     // D, L, R, U
        vector<int> dj = {0, -1, +1, 0};
        string dir = "DLRU";
        string path = "";
        solve(0, 0, m, n, ans, path, vis, di, dj, dir);
        return ans;
    }
};

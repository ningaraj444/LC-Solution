

another-->

class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<vector<int>>v;
        v.push_back(nums);
        while(next_permutation(nums.begin(),nums.end())){
            v.push_back(nums);
        }
        return v;
    }
};

class Solution {
public:
    void backtrack(vector<int>&nums,vector<vector<int>>&res,vector<int>&curr,vector<bool>&flag){
        if(curr.size()==nums.size()){
            res.push_back(curr);
            return;
        }
        for(int i=0;i<nums.size();i++){
            if(flag[i]) continue;
            curr.push_back(nums[i]);
            flag[i]=true;
            backtrack(nums,res,curr,flag);
            curr.pop_back();
            flag[i]=false;
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>>res;
        vector<int>curr;
        vector<bool>flag(nums.size(),false);
        backtrack(nums,res,curr,flag);
        return res;
    }
};

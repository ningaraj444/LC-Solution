class Solution {
public:
    void backtrack(vector<vector<string>>&res,vector<string>&board,int n,int row,unordered_set<int>& cols, unordered_set<int>& diag1, unordered_set<int>& diag2){
        if(n==row){
            res.push_back(board);
            return;
        }
        for(int col=0;col<n;col++){
            if(cols.count(col) || diag1.count(row-col) || diag2.count(row+col)) continue;
            board[row][col]='Q';
            cols.insert(col);
            diag1.insert(row-col);
            diag2.insert(row+col);

            backtrack(res,board,n,row+1,cols,diag1,diag2);

            cols.erase(col);
            diag1.erase(row-col);
            diag2.erase(row+col);
            board[row][col]='.';
        }

    }
    vector<vector<string>> solveNQueens(int n) {
        vector<string>board(n,string(n,'.'));
        vector<vector<string>>res;
        unordered_set<int>cols,diag1,diag2;
        backtrack(res,board,n,0,cols,diag1,diag2);
        return res;
    }
};




class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>result;
        vector<string>queen(n,string(n,'.'));
        vector<int>columns(n,0);
        vector<int>diagonals(2*n-1,0);
        vector<int>antidiagonals(2*n-1,0);
        nqueen(result,queen,columns,diagonals,antidiagonals,n,0);
        return result;
    }
    void nqueen(vector<vector<string>>&result,vector<string>&queen,vector<int>&columns,vector<int>&diagonals,vector<int>&antidiagonals,int n,int row){
        if(row==n){
            result.push_back(queen);
            return;
        }
        for(int col=0;col<n;col++){
            if(columns[col]||diagonals[row-col+n-1]||antidiagonals[col+row]) continue;
               queen[row][col]='Q';
               columns[col]=diagonals[row-col+n-1]=antidiagonals[row+col]=1;
               nqueen(result,queen,columns,diagonals,antidiagonals,n,row+1);
               queen[row][col]='.';
               columns[col]=diagonals[row-col+n-1]=antidiagonals[row+col]=0;
        }
    }
};

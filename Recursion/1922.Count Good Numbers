
class Solution {
public:
    int countGoodNumbers(long long n) {
        const int MOD = 1000000007;
        long long even_count = (n + 1) / 2; 
        long long odd_count = n / 2;        
        
        long long even_options = modPow(5, even_count, MOD);
        long long odd_options = modPow(4, odd_count, MOD);
        
        return (even_options * odd_options) % MOD; 
    }

    long long modPow(long long base, long long exp, int mod) {
        long long result = 1;
        while (exp > 0) {
            if (exp % 2 == 1) {
                result = (result * base) % mod;
            }
            base = (base * base) % mod;
            exp /= 2;
        }
        return result;
    }
};

using recursion:

class Solution {
private:
    long long power(long long x, long long n){
        if(n == 0){
            return 1;
        }
        long long ans = power(x, n/2);
        ans *= ans;
        ans %= mod;
        if(n%2==1){
            ans *= x;
            ans %= mod;
        }
        return ans;
    }
public:
    int countGoodNumbers(long long n) {
        long long numberOfOddPlaces = n/2;
        long long numberOfEvenPlaces = n/2 + n%2;
        return (power(5, numberOfEvenPlaces) * power(4, numberOfOddPlaces))%mod;
    }
};

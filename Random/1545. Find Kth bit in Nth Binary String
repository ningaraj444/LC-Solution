
class Solution {
public:
    char findKthBit(int n, int k) {
        int len=(1<<n)-1;
        int inversion_cnt=0;
        
        while(k>1){
            if(k==len/2+1){
                return (inversion_cnt & 1)? '0':'1';
            }
            else if(k>len/2){
                k=len-k+1;
                inversion_cnt++;
            }
            len/=2;
        }
        return(inversion_cnt & 1) ? '1':'0';
    }
};

recursive appraoch -->

class Solution {
public:
    char findKthBit(int n, int k) {
        if (n == 1) return '0';
        
        int length = (1 << n) - 1;
        int mid = length / 2 + 1;

        if (k == mid) return '1';
        else if (k < mid) return findKthBit(n - 1, k);
        else {
            int mirroredIndex = length - k + 1;
            char bit = findKthBit(n - 1, mirroredIndex);
            return bit == '0' ? '1' : '0';
        }
    }
};

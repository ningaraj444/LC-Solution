
class Solution {
public:
    bool possible(vector<int>&nums,int divisor,int threshold){
        int dividend=0;
        int n=nums.size();
        for(int i=0;i<n;i++){
            dividend+=(nums[i] + divisor - 1) / divisor;
        }
        return dividend<=threshold;
    }
    int smallestDivisor(vector<int>& nums, int threshold) {
        int n= nums.size();
        int mini=INT_MAX,maxi=INT_MIN;
        for(int i=0;i<n;i++){
            mini=min(mini,nums[i]);
            maxi=max(maxi,nums[i]);
        }
        if(threshold==n) return maxi;
        int low=1,high=maxi;
        while(low<=high){
            int  mid=low+(high-low)/2;
            if(possible(nums,mid,threshold)) high=mid-1;
            else low=mid+1;
        }
        return low;
    }
};

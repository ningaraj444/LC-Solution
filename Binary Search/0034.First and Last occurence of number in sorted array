
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int>v{-1,-1};
        int n=nums.size();
        int low=0,high=n-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums[mid]==target){
                v[0]=mid;
                high=mid-1;
            }
            else if(nums[mid]>target) high=mid-1;
            else low=mid+1;
        } 
        if(v[0]==-1){ // if target is no there is vector nums
            return v;
        }
         low=0,high=n-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums[mid]==target){
                v[1]=mid;
                low=mid+1;
            }
            else if(nums[mid]>target) high=mid-1;
            else low=mid+1;
        }
        return v;
    }
};

we can also find using lowerbound and upperbound concept with some addition to that we need to check for ub index has target value or not and all using if(nums[lb]!=target && lb==n) return {-1,-1};

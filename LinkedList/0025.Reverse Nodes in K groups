
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* ptr = head;
        for (int i = 0; i < k; ++i) {
            if (!ptr) return head;
            ptr = ptr->next;
        }

        ListNode* prev = reverseKGroup(ptr, k);
        ListNode* curr = head;
        while (curr != ptr) {
            ListNode* next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }

        return prev;
    }
};


iterative approach  ->

class Solution {
public:
    ListNode* reverse_list(ListNode* temp){
        ListNode* prev=NULL;
        while(temp){
            ListNode* front=temp->next;
            temp->next=prev;
            prev=temp;
            temp=front;
        }
        return prev;
    }
    ListNode* find_kthNode(ListNode* temp,int k){
        k-=1;
        while(temp && k>0){
            temp=temp->next;
            k--;
        }
        return temp;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* temp=head;
        ListNode* prevNode=NULL;
        while(temp){
        ListNode* kthNode=find_kthNode(temp,k);
        if(kthNode==NULL){
            if(prevNode) prevNode->next=temp;
            break;
        }
        ListNode* nextNode=kthNode->next;
        kthNode->next=NULL;
        ListNode* reversedHead=reverse_list(temp);
        if(temp==head) head=reversedHead;
        else prevNode->next=reversedHead;
        prevNode=temp;
        temp=nextNode;
        }    
        return head;
    }  
};

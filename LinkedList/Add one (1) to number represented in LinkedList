
class Solution {
public:
    ListNode* reverse_list(ListNode* head){
        ListNode* prev = NULL;
        ListNode* temp = head;
        while (temp) {
            ListNode* front = temp->next;
            temp->next = prev;
            prev = temp;
            temp = front;
        }
        return prev;
    }

    ListNode* addOne(ListNode* head) {
        ListNode* reversed_head = reverse_list(head);
        ListNode* temp = reversed_head;
        ListNode* prev = nullptr;  // To track last node before temp becomes NULL
        int carry = 1;

        while (temp) {
            temp->val += carry;
            if (temp->val < 10) {
                carry = 0;
                break;
            } else {
                temp->val = 0;
                carry = 1;
            }
            prev = temp;
            temp = temp->next;
        }

        if (carry) {
            prev->next = new ListNode(1);
        }

        return reverse_list(reversed_head);
    }
};

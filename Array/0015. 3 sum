//nums[i]+nums[j]+nums[j] =0

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
    int n = nums.size();
    set<vector<int>> res;

    for (int i = 0; i < n; ++i) {
        unordered_set<int> seen;
        for (int j = i + 1; j < n; ++j) {
            int third = -nums[i] - nums[j];
            if (seen.count(third)) {
                vector<int> triplet = {nums[i], nums[j], third};
                sort(triplet.begin(), triplet.end());
                res.insert(triplet);
            }
            seen.insert(nums[j]);
        }
    }

    return vector<vector<int>>(res.begin(), res.end());
}

};


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
      int n=nums.size();
      vector<vector<int>>ans;
      sort(nums.begin(),nums.end());
      for(int i=0;i<n;i++){
        int left=i+1;
        int right=n-1;
        if(i>0 && nums[i]==nums[i-1]) continue;
        while(left<right){
            int sum=nums[i]+nums[left]+nums[right];
          if(sum==0){
          ans.push_back({nums[i],nums[left],nums[right]});
              while(left<right && nums[left]==nums[left+1])left++;
              while(left<right && nums[right]==nums[right-1]) right--;
              left++;
              right--;
          }
          else if(sum<0) left++;
          else right--;
        }
      }
      return ans;
    }
};

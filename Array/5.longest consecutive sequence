
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int n=nums.size();
        if(n==0) return 0;
        sort(nums.begin(),nums.end());
        int cnt=1,max_cnt=1;
        for(int i=1;i<n;i++){
            if(nums[i]==nums[i-1]) continue;
            if(nums[i]==nums[i-1]+1) cnt++;
            else cnt=1;
            max_cnt=max(max_cnt,cnt);
        }
        return max_cnt;
    }
};

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int n=nums.size();
        if(n==0) return 0;
        int max_cnt=1;
         unordered_set<int>st(nums.begin(),nums.end()); //o(n)
         for(int num:st){
            if(st.find(num-1)==st.end()){
              int numb=num;
               int cnt=1;
            while(st.find(numb+1)!=st.end()){
                cnt++;
                numb++;
            }
            max_cnt=max(max_cnt,cnt);
          }
        }
        return max_cnt;
    }
};

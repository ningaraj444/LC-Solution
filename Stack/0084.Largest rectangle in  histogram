brute force:

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n=heights.size();
        stack<int>st;
        int nextsmall[n];
        int prevsmall[n];
        for(int i=0;i<n;i++){
            while(!st.empty() && heights[st.top()]>=heights[i]){
                st.pop();
            }
            if(st.empty()) prevsmall[i]=-1;
            else prevsmall[i]=st.top();
            st.push(i);
        }
        while(!st.empty()) st.pop();
         for(int i=n-1;i>=0;i--){
            while(!st.empty() && heights[st.top()]>=heights[i]){
                st.pop();
            }
            if(st.empty()) nextsmall[i]=n;
            else nextsmall[i]=st.top();
            st.push(i);
        }
        int area=0;
        for(int i=0;i<n;i++){
            int len=(nextsmall[i]-1)-prevsmall[i];
             area=max(area,len*heights[i]);
        }
        return area;
    }
};


optimal:

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n=heights.size();
        stack<int>st;
       int maxArea=0;
       int ele;
       for(int i=0;i<n;i++){
        while(!st.empty() && heights[st.top()]>heights[i]){
             ele=heights[st.top()];
            st.pop();
           int nsi=i;
            int psi=(st.empty()? -1:st.top());
            maxArea=max(maxArea,(nsi-psi-1)*ele);
        }
        st.push(i);
       }
       while(!st.empty()){
         ele=heights[st.top()];
        st.pop();
        int psi=(st.empty()?-1:st.top());
        maxArea=max(maxArea,(n-1-psi)*ele);
       }
       return maxArea;
    }
};

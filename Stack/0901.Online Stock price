
brute force tc --> per next() call: O(n), where n is the current size of the vector v
            sc --> O(n), where n is the number of prices processed 

class StockSpanner {
public:
vector<int>v;
int cnt;
    StockSpanner() {   
    }
    int next(int price) {
        v.push_back(price);
         cnt=1;
         if(v.size()==1) return cnt;
         for(int i=v.size()-2;i>=0;i--){
            if(v[i]<=price)cnt++;
            else break;
         }
         return cnt;
    }
};

optimal code:
tc -->O(1) per call {next} (amortized).
sc: O(n), where n is the number of prices processed

class StockSpanner {
public:
stack<pair<int,int>>st;
int indx=-1;
    StockSpanner() {
        // indx=-1; 
    }
    int next(int price) {
        indx=indx+1;
      while(!st.empty() && st.top().second<=price) st.pop();
      int ans=indx-(st.empty()?-1:st.top().first);
      st.push({indx,price});
         return ans;
    }
};

/**
 * Your StockSpanner object will be instantiated and called as such:
 * StockSpanner* obj = new StockSpanner();
 * int param_1 = obj->next(price);
 */

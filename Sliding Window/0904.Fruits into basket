Brute force -->

class Solution {
public:
    int totalFruit(vector<int>& fruits) {
        int n=fruits.size();
        int maxlen=0;
        for(int i=0;i<n;i++){
            set<int>st;
            for(int j=i;j<n;j++){
                st.insert(fruits[j]);
                if(st.size()<=2) maxlen=max(maxlen,j-i+1);
                else break;
            }
        }
        return maxlen;
    }
};

optimal -->

class Solution {
public:
    int totalFruit(vector<int>& fruits) {
        int n=fruits.size();
        int maxlen=0;
        int right=0,left=0;
        unordered_map<int,int>mpp;
        while(right<n){
             mpp[fruits[right]]++;
            if(mpp.size()>2){
                mpp[fruits[left]]--;
                if(mpp[fruits[left]]==0) mpp.erase(fruits[left]);
                left++;
            }
            maxlen=max(maxlen,right-left+1);
            right++;
        }
        return maxlen;
    }
};

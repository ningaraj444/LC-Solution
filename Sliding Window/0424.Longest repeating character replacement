brute force -->
class Solution {
public:
    int characterReplacement(string s, int k) {
        int n=s.length();
        int maxlen=0;
        int changes=0;
        unordered_map<char,int>mpp;
        for(int i=0;i<n;i++){
             vector<int>hash(26,0);
             int maxfreq=0;
            for(int j=i;j<n;j++){
               hash[s[j]-'A']++;
               maxfreq=max(maxfreq,hash[s[j]-'A']);
               changes=(j-i+1-maxfreq);
               if(changes<=k) maxlen=max(maxlen,j-i+1);
               else break;
            }
        }
        return maxlen;
    }
};

optimal -->

class Solution {
public:
    int characterReplacement(string s, int k) {
        int n=s.length();
        int left=0,right=0;
        int maxlen=0,maxfreq=0;
        int hash[26]={0};
        while(right<n){
         hash[s[right]-'A']++;
         maxfreq=max(maxfreq,hash[s[right]-'A']);
         int len=right-left+1;
         if((len-maxfreq)>k) {
            hash[s[left]-'A']--;
            left++;
            maxfreq=0;
         }
         maxlen=max(maxlen,right-left+1);
         right++;
        }
        return maxlen;
    }
};

brute force -->

class Solution {
public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        int n=nums.size();
        int numsub=0;
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                sum+=nums[j];
                if(sum==goal) numsub++;
                if(sum>goal) break;
            }
        }
        return numsub;
    }
};

better --> 

class Solution {
public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        int n = nums.size();
        int numsub = 0;
        long long sum = 0;
        int left = 0, right = 0;

        while (right < n) {
            sum += nums[right];
            while (sum > goal) {
                sum -= nums[left];
                left++;  
            }
            int temp = left;
            while (sum == goal && temp <= right) {
                numsub++;
                if (nums[temp] == 1) break;
                temp++;
            }
            right++;
        }
        return numsub;
    }
};

optimal -->

class Solution {
public:
   int numsub(vector<int>&nums,int goal){
    if(goal<0) return 0;
     int n=nums.size();
     int right=0,left=0;
     int numberof_sub=0;
     int sum=0;
     while(right<n){
      sum+=nums[right];
        while(sum>goal){
         sum-=nums[left];
         left++;
        }
        numberof_sub+=right-left+1;
        right++;
     }
     return numberof_sub;
   }

    int numSubarraysWithSum(vector<int>& nums, int goal) {
        int n = nums.size();
        int numsub_goal=numsub(nums,goal);
        int numsub_goalminus_one=numsub(nums,goal-1);
        return numsub_goal-numsub_goalminus_one;
    }
};

